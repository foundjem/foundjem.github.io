<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects | Armstrong website</title><link>https://foundjem.github.io/project/</link><atom:link href="https://foundjem.github.io/project/index.xml" rel="self" type="application/rss+xml"/><description>Projects</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Tue, 11 Feb 2025 00:00:00 +0000</lastBuildDate><image><url>https://foundjem.github.io/media/logo.svg</url><title>Projects</title><link>https://foundjem.github.io/project/</link></image><item><title>Multi-Agent AI Systems</title><link>https://foundjem.github.io/project/agentic/</link><pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate><guid>https://foundjem.github.io/project/agentic/</guid><description>&lt;h1 id="agentic-ai-systems-in-multi-environment-settings">&lt;strong>Agentic AI Systems in Multi-Environment Settings&lt;/strong>&lt;/h1>
&lt;h4 id="1-introduction-to-agentic-ai">&lt;strong>1. Introduction to Agentic AI&lt;/strong>&lt;/h4>
&lt;p>An &lt;strong>Agentic AI System&lt;/strong> refers to an autonomous AI system that can sense, decide, and act in an environment to achieve specific goals. In &lt;strong>multi-environment settings&lt;/strong>, these AI agents operate across diverse, dynamic, and often conflicting environments, requiring &lt;strong>adaptive decision-making, communication, and coordination&lt;/strong>.&lt;/p>
&lt;hr>
&lt;h2 id="2-key-characteristics-of-agentic-ai-in-multi-environment-systems">&lt;strong>2. Key Characteristics of Agentic AI in Multi-Environment Systems&lt;/strong>&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>Autonomy&lt;/strong> â€“ Operates independently with minimal human intervention.&lt;/li>
&lt;li>&lt;strong>Adaptability&lt;/strong> â€“ Adjusts behavior based on real-time environmental changes.&lt;/li>
&lt;li>&lt;strong>Multi-Agent Coordination&lt;/strong> â€“ Collaborates or competes with other agents.&lt;/li>
&lt;li>&lt;strong>Distributed Decision-Making&lt;/strong> â€“ Decentralized intelligence for resilience.&lt;/li>
&lt;li>&lt;strong>Goal-Oriented Optimization&lt;/strong> â€“ Maximizes rewards while minimizing risks.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="3-types-of-multi-environment-settings">&lt;strong>3. Types of Multi-Environment Settings&lt;/strong>&lt;/h2>
&lt;h3 id="31-homogeneous-vs-heterogeneous-environments">&lt;strong>3.1. Homogeneous vs. Heterogeneous Environments&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Homogeneous Environments&lt;/strong>: AI agents operate in uniform conditions (e.g., cloud-based automation).&lt;/li>
&lt;li>&lt;strong>Heterogeneous Environments&lt;/strong>: Agents interact in mixed conditions with different rules, constraints, and uncertainties (e.g., cyber-physical systems).&lt;/li>
&lt;/ul>
&lt;h3 id="32-static-vs-dynamic-environments">&lt;strong>3.2. Static vs. Dynamic Environments&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Static Environments&lt;/strong>: Rules and conditions remain constant (e.g., financial AI trading models).&lt;/li>
&lt;li>&lt;strong>Dynamic Environments&lt;/strong>: Conditions evolve over time (e.g., self-driving cars in urban traffic).&lt;/li>
&lt;/ul>
&lt;h3 id="33-cooperative-vs-competitive-multi-agent-environments">&lt;strong>3.3. Cooperative vs. Competitive Multi-Agent Environments&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Cooperative&lt;/strong>: AI agents work together towards a shared goal (e.g., swarm robotics in disaster response).&lt;/li>
&lt;li>&lt;strong>Competitive&lt;/strong>: AI agents compete against each other (e.g., adversarial cybersecurity AI).&lt;/li>
&lt;/ul>
&lt;h3 id="34-fully-observable-vs-partially-observable-environments">&lt;strong>3.4. Fully Observable vs. Partially Observable Environments&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Fully Observable&lt;/strong>: AI agents have complete visibility (e.g., chess AI).&lt;/li>
&lt;li>&lt;strong>Partially Observable&lt;/strong>: AI agents make decisions with limited information (e.g., autonomous drones in complex terrain).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="4-architectural-models-for-multi-environment-ai-systems">&lt;strong>4. Architectural Models for Multi-Environment AI Systems&lt;/strong>&lt;/h2>
&lt;h3 id="41-multi-agent-reinforcement-learning-marl">&lt;strong>4.1. Multi-Agent Reinforcement Learning (MARL)&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>Agents learn optimal strategies through interaction and rewards.&lt;/li>
&lt;li>&lt;strong>Mathematical Model:&lt;/strong>
\[
Q(s, a) = (1 - \alpha) Q(s, a) + \alpha [R + \gamma \max_{a'} Q(s', a')]
\]
&lt;ul>
&lt;li>\( Q(s, a) \): Expected reward for action \( a \) in state \( s \)&lt;/li>
&lt;li>\( \alpha \): Learning rate&lt;/li>
&lt;li>\( R \): Immediate reward&lt;/li>
&lt;li>\( \gamma \): Discount factor for future rewards&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="42-decentralized-partially-observable-markov-decision-processes-dec-pomdp">&lt;strong>4.2. Decentralized Partially Observable Markov Decision Processes (Dec-POMDP)&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>Used in &lt;strong>multi-agent scenarios&lt;/strong> with uncertainty.&lt;/li>
&lt;li>Each agent \( i \) has a policy \( \pi_i \) that maps local observations \( o_i \) to actions \( a_i \).&lt;/li>
&lt;li>&lt;strong>Mathematical Model:&lt;/strong>
\[
\pi_i(o_i) = \arg \max_{a_i} \sum_{t} \gamma^t R_i(s_t, a_t)
\]&lt;/li>
&lt;/ul>
&lt;h3 id="43-federated-learning-for-distributed-ai-agents">&lt;strong>4.3. Federated Learning for Distributed AI Agents&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>Agents &lt;strong>collaborate&lt;/strong> by training models locally and sharing updates.&lt;/li>
&lt;li>&lt;strong>Mathematical Model:&lt;/strong>
\[
w_{t+1} = w_t - \eta \nabla F(w_t)
\]
&lt;ul>
&lt;li>\( w_t \): Model weights at time \( t \)&lt;/li>
&lt;li>\( \eta \): Learning rate&lt;/li>
&lt;li>\( \nabla F(w_t) \): Gradient of the loss function&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="5-security-and-trust-in-agentic-ai">&lt;strong>5. Security and Trust in Agentic AI&lt;/strong>&lt;/h2>
&lt;h3 id="51-adversarial-ai-attacks">&lt;strong>5.1. Adversarial AI Attacks&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Evasion Attacks&lt;/strong>: Fooling agents using adversarial examples.&lt;/li>
&lt;li>&lt;strong>Poisoning Attacks&lt;/strong>: Manipulating training data to corrupt decision-making.&lt;/li>
&lt;/ul>
&lt;h3 id="52-trust-models">&lt;strong>5.2. Trust Models&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>Trust is modeled using &lt;strong>Bayesian belief networks&lt;/strong>:
\[
P(T | E) = \frac{P(E | T) P(T)}{P(E)}
\]
where \( P(T | E) \) is the trust probability given evidence \( E \).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="6-real-world-applications-of-agentic-ai-in-multi-environment-systems">&lt;strong>6. Real-World Applications of Agentic AI in Multi-Environment Systems&lt;/strong>&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>Autonomous Vehicles&lt;/strong> â€“ Navigate in &lt;strong>dynamic, multi-agent&lt;/strong> urban traffic.&lt;/li>
&lt;li>&lt;strong>Cybersecurity AI&lt;/strong> â€“ Detect threats in &lt;strong>partially observable&lt;/strong> network environments.&lt;/li>
&lt;li>&lt;strong>Healthcare AI&lt;/strong> â€“ &lt;strong>Federated learning&lt;/strong> for personalized medicine.&lt;/li>
&lt;li>&lt;strong>Financial AI Trading&lt;/strong> â€“ &lt;strong>Reinforcement learning-based&lt;/strong> market strategies.&lt;/li>
&lt;li>&lt;strong>Smart Grid Energy Management&lt;/strong> â€“ Adaptive &lt;strong>multi-agent&lt;/strong> optimization.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="7-conclusion">&lt;strong>7. Conclusion&lt;/strong>&lt;/h2>
&lt;p>Agentic AI in multi-environment settings requires:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Adaptive learning models&lt;/strong> (MARL, Dec-POMDP).&lt;/li>
&lt;li>&lt;strong>Distributed decision-making&lt;/strong> (Federated AI).&lt;/li>
&lt;li>&lt;strong>Security mechanisms&lt;/strong> (Trust models, Adversarial AI).
These &lt;strong>autonomous systems&lt;/strong> will drive the future of &lt;strong>self-learning, secure, and efficient AI ecosystems&lt;/strong>. ðŸš€&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="1-multi-agent-reinforcement-learning-marl">&lt;strong>1. Multi-Agent Reinforcement Learning (MARL)&lt;/strong>&lt;/h3>
&lt;p>This example implements &lt;strong>Q-learning&lt;/strong> for two agents navigating a grid environment.&lt;/p>
&lt;h4 id="environment">&lt;strong>Environment:&lt;/strong>&lt;/h4>
&lt;ul>
&lt;li>A &lt;strong>5x5 grid&lt;/strong> where two agents must reach their respective goals.&lt;/li>
&lt;li>&lt;strong>Reward:&lt;/strong> +10 for reaching the goal, -1 for illegal moves.&lt;/li>
&lt;li>&lt;strong>Agents learn simultaneously using Q-learning&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;h4 id="code">&lt;strong>Code:&lt;/strong>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">random&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Environment settings&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GRID_SIZE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ACTIONS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;UP&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;DOWN&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;LEFT&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;RIGHT&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ACTION_MAP&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;UP&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;DOWN&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;LEFT&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;RIGHT&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Agents start at random positions, goals at fixed points&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">AGENT_1_GOAL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">AGENT_2_GOAL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Q-tables for agents&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Q_agent1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">zeros&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">GRID_SIZE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GRID_SIZE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ACTIONS&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Q_agent2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">zeros&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">GRID_SIZE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GRID_SIZE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ACTIONS&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Hyperparameters&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">alpha&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.1&lt;/span> &lt;span class="c1"># Learning rate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gamma&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.9&lt;/span> &lt;span class="c1"># Discount factor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">epsilon&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.1&lt;/span> &lt;span class="c1"># Exploration rate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">episodes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Function to get next position&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">action&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_position&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">ACTION_MAP&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">position&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">ACTION_MAP&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">new_position&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">GRID_SIZE&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">new_position&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">GRID_SIZE&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">new_position&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">position&lt;/span> &lt;span class="c1"># Invalid moves stay in place&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Training loop&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">episode&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">episodes&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">agent1_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GRID_SIZE&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GRID_SIZE&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">agent2_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GRID_SIZE&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GRID_SIZE&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">agent1_pos&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">AGENT_1_GOAL&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">agent2_pos&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">AGENT_2_GOAL&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">agent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Q_table&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">goal&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="p">[(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Q_agent1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">AGENT_1_GOAL&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Q_agent2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">AGENT_2_GOAL&lt;/span>&lt;span class="p">)]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">agent1_pos&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">agent&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="n">agent2_pos&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">pos&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">goal&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Choose action (Îµ-greedy)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">epsilon&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">action&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">choice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ACTIONS&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">action&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ACTIONS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argmax&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Q_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">:])]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Move agent&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">action&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">reward&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">new_pos&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">goal&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Update Q-table&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Q_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">ACTIONS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">alpha&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">reward&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">gamma&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Q_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">new_pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">new_pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">:])&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">Q_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">ACTIONS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">action&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Update agent position&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">agent&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">agent1_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_pos&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">agent2_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_pos&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Training complete! Agents have learned optimal paths.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="explanation">&lt;strong>Explanation:&lt;/strong>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>Two agents learn independently&lt;/strong> using &lt;strong>Q-learning&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Grid-based movement&lt;/strong>, avoiding invalid moves.&lt;/li>
&lt;li>&lt;strong>Goal-oriented reinforcement learning&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="2-game-theory-based-multi-agent-decision-making">&lt;strong>2. Game Theory-Based Multi-Agent Decision Making&lt;/strong>&lt;/h3>
&lt;p>This example implements a &lt;strong>Prisoner&amp;rsquo;s Dilemma&lt;/strong> game between two AI agents.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">nashpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">nash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Define the payoff matrix for Prisoner&amp;#39;s Dilemma&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">P1_payoffs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]])&lt;/span> &lt;span class="c1"># Row player (Agent 1)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">P2_payoffs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]])&lt;/span> &lt;span class="c1"># Column player (Agent 2)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create a game using Nashpy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">game&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nash&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Game&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">P1_payoffs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">P2_payoffs&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Compute Nash Equilibria&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">equilibria&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">support_enumeration&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Display Nash Equilibrium Strategies&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Nash Equilibria (Mixed Strategies):&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">eq&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">equilibria&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Agent 1 Strategy: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, Agent 2 Strategy: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">eq&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="explanation-1">&lt;strong>Explanation:&lt;/strong>&lt;/h4>
&lt;ul>
&lt;li>Models two &lt;strong>self-interested agents&lt;/strong> choosing &lt;strong>cooperate (C) or defect (D)&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Nash equilibrium&lt;/strong> represents the &lt;strong>optimal mixed strategies&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="3-decentralized-multi-agent-system-with-communication">&lt;strong>3. Decentralized Multi-Agent System with Communication&lt;/strong>&lt;/h3>
&lt;p>A &lt;strong>swarm of agents&lt;/strong> moves towards a goal using &lt;strong>decentralized coordination&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">matplotlib.pyplot&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">plt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Environment settings&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">NUM_AGENTS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GOAL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">MOVE_STEP&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">COMMUNICATION_RANGE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">2.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ITERATIONS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">50&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Initialize agent positions randomly&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">agents&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NUM_AGENTS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">move_towards_goal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">agent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">neighbors&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Compute average neighbor position (consensus rule)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">neighbors&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">avg_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">neighbors&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">axis&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">move_direction&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">avg_pos&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">agent&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">move_direction&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GOAL&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">agent&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">agent&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">MOVE_STEP&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">move_direction&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">linalg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">norm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">move_direction&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Simulation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">positions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">agents&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">copy&lt;/span>&lt;span class="p">()]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ITERATIONS&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_positions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">agent&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">agents&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">neighbors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">other&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">other&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">agents&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">linalg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">norm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">agent&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">COMMUNICATION_RANGE&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_positions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">move_towards_goal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">agent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">neighbors&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">agents&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new_positions&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">positions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">agents&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">copy&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Plot results&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">positions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">positions&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">figure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">figsize&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NUM_AGENTS&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">plot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">positions&lt;/span>&lt;span class="p">[:,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">positions&lt;/span>&lt;span class="p">[:,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">marker&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;o&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">linestyle&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;-&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">scatter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GOAL&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">GOAL&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">marker&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;X&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;red&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Goal&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">xlabel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;X Position&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ylabel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Y Position&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Swarm Agents Moving Towards Goal&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">legend&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">show&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="explanation-2">&lt;strong>Explanation:&lt;/strong>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>10 agents&lt;/strong> move towards a &lt;strong>goal&lt;/strong> using &lt;strong>local communication&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Consensus-based movement&lt;/strong> makes it &lt;strong>robust&lt;/strong> to missing data.&lt;/li>
&lt;li>Models &lt;strong>swarm robotics, decentralized AI, and self-organizing systems&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="4-reinforcement-learning-for-multi-agent-traffic-control">&lt;strong>4. Reinforcement Learning for Multi-Agent Traffic Control&lt;/strong>&lt;/h3>
&lt;p>A &lt;strong>multi-agent reinforcement learning&lt;/strong> setup where &lt;strong>traffic lights learn&lt;/strong> optimal control.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">random&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Environment setup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ACTIONS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;RED&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;GREEN&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">TRAFFIC_STATES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;LOW&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;MEDIUM&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;HIGH&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Q_table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">zeros&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TRAFFIC_STATES&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ACTIONS&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Learning parameters&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">alpha&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gamma&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">epsilon&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">episodes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Reward function (based on congestion reduction)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">reward&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">action&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">state&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;HIGH&amp;#34;&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">action&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;GREEN&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="c1"># Best action&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">state&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;LOW&amp;#34;&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">action&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;RED&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="c1"># Minor reward&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="c1"># Wrong action penalty&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Training&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">episodes&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state_idx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TRAFFIC_STATES&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Choose action (Îµ-greedy)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">epsilon&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">action_idx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ACTIONS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">action_idx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">argmax&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Q_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">state_idx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">:])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Get reward&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">reward&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TRAFFIC_STATES&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">state_idx&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">ACTIONS&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">action_idx&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Update Q-table&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Q_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">state_idx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">action_idx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">alpha&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">gamma&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Q_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">state_idx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">:])&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">Q_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">state_idx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">action_idx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Multi-Agent Traffic Control Training Complete!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Final Q-Table:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Q_table&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="explanation-3">&lt;strong>Explanation:&lt;/strong>&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>Traffic signals&lt;/strong> learn &lt;strong>optimal switching&lt;/strong> using &lt;strong>Q-learning&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Adaptive control&lt;/strong> based on &lt;strong>real-time congestion&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="conclusion">&lt;strong>Conclusion&lt;/strong>&lt;/h2>
&lt;p>These &lt;strong>multi-agent system implementations&lt;/strong> provide:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Reinforcement Learning (Q-learning)&lt;/strong> â€“ AI agents learning in a &lt;strong>shared environment&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Game Theory (Nash Equilibrium)&lt;/strong> â€“ Competitive or cooperative decision-making.&lt;/li>
&lt;li>&lt;strong>Decentralized Coordination&lt;/strong> â€“ Swarm behavior using &lt;strong>local communication&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Traffic Optimization&lt;/strong> â€“ AI-based &lt;strong>autonomous traffic control&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>These techniques can be used for &lt;strong>robotics, cybersecurity, and distributed AI&lt;/strong> applications. ðŸš€&lt;/p></description></item><item><title>Climate change</title><link>https://foundjem.github.io/project/climate-change/</link><pubDate>Sun, 26 Jan 2025 00:00:00 +0000</pubDate><guid>https://foundjem.github.io/project/climate-change/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;vector&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;png.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">convertToGrayscale&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">inputFileName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">outputFileName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FILE&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">inputFile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inputFileName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s">&amp;#34;rb&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">inputFile&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cerr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Error opening input image file.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">png_structp&lt;/span> &lt;span class="n">pngPtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">png_create_read_struct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PNG_LIBPNG_VER_STRING&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cerr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Error creating PNG read structure.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fclose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inputFile&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">png_infop&lt;/span> &lt;span class="n">infoPtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">png_create_info_struct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">infoPtr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cerr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Error creating PNG info structure.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">png_destroy_read_struct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fclose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inputFile&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">png_init_io&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">inputFile&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">png_read_info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">infoPtr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">png_get_image_width&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">infoPtr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">png_get_image_height&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">infoPtr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">bitDepth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">png_get_bit_depth&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">infoPtr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">colorType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">png_get_color_type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">infoPtr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bitDepth&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">colorType&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">PNG_COLOR_TYPE_RGB&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cerr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Unsupported image format. Only 8-bit RGB images are supported.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">png_destroy_read_struct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">infoPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fclose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inputFile&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">imageData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">inputImage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">png_read_row&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">png_bytep&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inputImage&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">()),&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fclose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inputFile&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">png_destroy_read_struct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">infoPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Convert to grayscale
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">outputImage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Simple grayscale conversion formula: (R + G + B) / 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">outputImage&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">inputImage&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">inputImage&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">inputImage&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Write output image
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">FILE&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">outputFile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outputFileName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c_str&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s">&amp;#34;wb&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">outputFile&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cerr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Error opening output image file.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pngPtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">png_create_write_struct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PNG_LIBPNG_VER_STRING&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cerr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Error creating PNG write structure.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fclose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outputFile&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">infoPtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">png_create_info_struct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">infoPtr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cerr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Error creating PNG info structure.&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">png_destroy_write_struct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fclose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outputFile&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">png_init_io&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">outputFile&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">png_set_IHDR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">infoPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PNG_COLOR_TYPE_GRAY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PNG_INTERLACE_NONE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PNG_COMPRESSION_TYPE_DEFAULT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PNG_FILTER_TYPE_DEFAULT&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">png_write_info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">infoPtr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">png_write_row&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">png_bytep&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outputImage&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">png_write_end&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">png_destroy_write_struct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pngPtr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">infoPtr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fclose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outputFile&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Image processing complete. Grayscale image saved to &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">outputFileName&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">inputFileName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;input.png&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">outputFileName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;output_grayscale.png&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">convertToGrayscale&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inputFileName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">outputFileName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!--more external_link: https://github.com/scikit-learn/scikit-learn--></description></item><item><title>Toxicity and unconcious bias</title><link>https://foundjem.github.io/project/toxicity/</link><pubDate>Thu, 26 Dec 2024 00:00:00 +0000</pubDate><guid>https://foundjem.github.io/project/toxicity/</guid><description>&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Oni9oaNjsnQ?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
&lt;/div>
&lt;h2 id="using-nlp-and-language-models-to-address-toxicity-and-unconscious-bias">&lt;strong>Using NLP and Language Models to Address Toxicity and Unconscious Bias&lt;/strong>&lt;/h2>
&lt;h2 id="theoretical-foundations-of-nlp-for-addressing-toxicity-and-bias">&lt;strong>Theoretical Foundations of NLP for Addressing Toxicity and Bias&lt;/strong>&lt;/h2>
&lt;p>To rigorously address &lt;strong>toxicity and unconscious bias&lt;/strong> in language models, we rely on &lt;strong>linguistic theories, probabilistic models, fairness-aware AI principles, adversarial learning, and information theory&lt;/strong>. Below, I outline the &lt;strong>strong theoretical basis&lt;/strong> underpinning these techniques.&lt;/p>
&lt;hr>
&lt;h2 id="1-toxicity-detection-and-classification">&lt;strong>1. Toxicity Detection and Classification&lt;/strong>&lt;/h2>
&lt;p>Toxicity detection can be modeled as a &lt;strong>probabilistic text classification problem&lt;/strong> where we assign labels (toxic or non-toxic) based on learned representations.&lt;/p>
&lt;h3 id="11-bayesian-formulation-of-text-classification">&lt;strong>1.1. Bayesian Formulation of Text Classification&lt;/strong>&lt;/h3>
&lt;p>Using &lt;strong>NaÃ¯ve Bayes&lt;/strong> for toxicity detection:&lt;/p>
\[
P(T | X) = \frac{P(X | T) P(T)}{P(X)}
\]&lt;p>where:&lt;/p>
&lt;ul>
&lt;li>\( P(T | X) \) is the probability that text \( X \) is toxic.&lt;/li>
&lt;li>\( P(X | T) \) is the likelihood of observing text \( X \) given it is toxic.&lt;/li>
&lt;li>\( P(T) \) is the prior probability of toxicity.&lt;/li>
&lt;li>\( P(X) \) is the probability of observing text \( X \).&lt;/li>
&lt;/ul>
&lt;p>By assuming &lt;strong>independence of words&lt;/strong> (Bag-of-Words model):&lt;/p>
\[
P(T | X) \propto P(T) \prod_{i=1}^{n} P(w_i | T)
\]&lt;p>where \( w_i \) are the words in text \( X \).&lt;/p>
&lt;p>This model is &lt;strong>effective for simple toxicity detection&lt;/strong> but struggles with &lt;strong>context-dependent toxicity&lt;/strong> (e.g., sarcasm).&lt;/p>
&lt;h3 id="12-deep-learning-for-toxicity-classification">&lt;strong>1.2. Deep Learning for Toxicity Classification&lt;/strong>&lt;/h3>
&lt;p>A more robust method is using &lt;strong>deep neural networks (DNNs)&lt;/strong> with word embeddings \( W \) and classification function \( f(W) \):&lt;/p>
\[
y = f(W) = \sigma(W \cdot X + b)
\]&lt;p>where:&lt;/p>
&lt;ul>
&lt;li>\( W \) is the weight matrix,&lt;/li>
&lt;li>\( X \) is the word embedding vector,&lt;/li>
&lt;li>\( \sigma \) is the softmax function.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Optimization Problem&lt;/strong>:
To minimize classification error, we solve:&lt;/p>
\[
\min_{W} \sum_{i=1}^{N} L(y_i, f(W X_i))
\]&lt;p>where \( L \) is a loss function (e.g., cross-entropy loss).&lt;/p>
&lt;hr>
&lt;h2 id="2-bias-detection-in-language-models">&lt;strong>2. Bias Detection in Language Models&lt;/strong>&lt;/h2>
&lt;h3 id="21-word-embedding-association-test-weat">&lt;strong>2.1. Word Embedding Association Test (WEAT)&lt;/strong>&lt;/h3>
&lt;p>To measure bias in word embeddings (e.g., Word2Vec, GloVe), we use &lt;strong>cosine similarity&lt;/strong> to quantify associations.&lt;/p>
&lt;h4 id="mathematical-definition">&lt;strong>Mathematical Definition&lt;/strong>&lt;/h4>
&lt;p>Given &lt;strong>two sets of words&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Target set&lt;/strong>: \( T = \{w_1, w_2, ..., w_m\} \)&lt;/li>
&lt;li>&lt;strong>Attribute set&lt;/strong>: \( A = \{a_1, a_2, ..., a_n\} \)&lt;/li>
&lt;/ul>
&lt;p>The bias score is:&lt;/p>
\[
s(T, A) = \sum_{w \in T} \left[ \frac{1}{n} \sum_{a \in A} \cos(w, a) \right]
\]&lt;p>If &lt;strong>gendered words (e.g., &amp;ldquo;man&amp;rdquo;, &amp;ldquo;woman&amp;rdquo;) cluster with career-related terms (e.g., &amp;ldquo;doctor&amp;rdquo;, &amp;ldquo;nurse&amp;rdquo;)&lt;/strong>, this indicates &lt;strong>stereotypical biases&lt;/strong> in embeddings.&lt;/p>
&lt;h4 id="example-bias-in-word-embeddings">&lt;strong>Example: Bias in Word Embeddings&lt;/strong>&lt;/h4>
\[
\text{cosine}(\text{"doctor"}, \text{"man"}) > \text{cosine}(\text{"doctor"}, \text{"woman"})
\]&lt;p>This means &lt;strong>&amp;ldquo;doctor&amp;rdquo; is closer to &amp;ldquo;man&amp;rdquo; than &amp;ldquo;woman&amp;rdquo;&lt;/strong>, reflecting gender bias in training data.&lt;/p>
&lt;h3 id="22-bias-correction-using-orthogonal-projection">&lt;strong>2.2. Bias Correction Using Orthogonal Projection&lt;/strong>&lt;/h3>
&lt;p>To debias embeddings, we project onto a &lt;strong>bias-free subspace&lt;/strong>:&lt;/p>
\[
\tilde{w} = w - \sum_{i=1}^{k} \langle w, b_i \rangle b_i
\]&lt;p>where:&lt;/p>
&lt;ul>
&lt;li>\( w \) is the original word embedding,&lt;/li>
&lt;li>\( b_i \) are bias direction vectors.&lt;/li>
&lt;/ul>
&lt;p>This removes gender/racial correlations while &lt;strong>preserving semantic meaning&lt;/strong>.&lt;/p>
&lt;hr>
&lt;h2 id="3-adversarial-learning-for-bias-and-toxicity-mitigation">&lt;strong>3. Adversarial Learning for Bias and Toxicity Mitigation&lt;/strong>&lt;/h2>
&lt;p>We use &lt;strong>adversarial debiasing&lt;/strong> to remove bias from models while maintaining accuracy.&lt;/p>
&lt;h3 id="31-adversarial-loss-function">&lt;strong>3.1. Adversarial Loss Function&lt;/strong>&lt;/h3>
&lt;p>A language model \( M \) is trained with two competing objectives:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Minimize classification loss&lt;/strong> \( L_C \).&lt;/li>
&lt;li>&lt;strong>Maximize bias confusion loss&lt;/strong> \( L_B \).&lt;/li>
&lt;/ol>
\[
L = L_C(X, y) - \lambda L_B(X, b)
\]&lt;p>where:&lt;/p>
&lt;ul>
&lt;li>\( X \) is the input text,&lt;/li>
&lt;li>\( y \) is the label (e.g., toxic/non-toxic),&lt;/li>
&lt;li>\( b \) is the protected attribute (e.g., gender),&lt;/li>
&lt;li>\( \lambda \) controls trade-off between accuracy and fairness.&lt;/li>
&lt;/ul>
&lt;h3 id="32-differentially-private-training">&lt;strong>3.2. Differentially Private Training&lt;/strong>&lt;/h3>
&lt;p>To prevent models from &lt;strong>memorizing biased patterns&lt;/strong>, we use &lt;strong>differential privacy (DP)&lt;/strong>:&lt;/p>
\[
P(M(X) = y) \approx P(M(X') = y) + \epsilon
\]&lt;p>where:&lt;/p>
&lt;ul>
&lt;li>\( X' \) is a &lt;strong>slightly modified&lt;/strong> version of \( X \),&lt;/li>
&lt;li>\( \epsilon \) is the &lt;strong>privacy budget&lt;/strong> (smaller is better).&lt;/li>
&lt;/ul>
&lt;p>Using &lt;strong>DP-SGD (Differentially Private Stochastic Gradient Descent)&lt;/strong>:&lt;/p>
\[
W_{t+1} = W_t - \eta \left( \nabla L(W_t) + \mathcal{N}(0, \sigma^2) \right)
\]&lt;p>where &lt;strong>Gaussian noise \( \mathcal{N}(0, \sigma^2) \)&lt;/strong> ensures individual examples donâ€™t overly influence model behavior.&lt;/p>
&lt;hr>
&lt;h2 id="4-fair-nlp-generation-and-detoxification">&lt;strong>4. Fair NLP Generation and Detoxification&lt;/strong>&lt;/h2>
&lt;h3 id="41-controlled-text-generation-with-fair-constraints">&lt;strong>4.1. Controlled Text Generation with Fair Constraints&lt;/strong>&lt;/h3>
&lt;p>We modify &lt;strong>text generation objectives&lt;/strong> by adding fairness constraints:&lt;/p>
\[
P(W | C) = \frac{P(C | W) P(W)}{P(C)}
\]&lt;p>where:&lt;/p>
&lt;ul>
&lt;li>\( P(W | C) \) is the probability of generating &lt;strong>word \( W \) given context \( C \)&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Penalty for unfair text&lt;/strong>:&lt;/li>
&lt;/ul>
\[
L(W) = L_{\text{LM}}(W) + \lambda \sum_{i} P(W | b_i)
\]&lt;p>where \( b_i \) are &lt;strong>biased word categories&lt;/strong>.&lt;/p>
&lt;h3 id="42-reinforcement-learning-for-detoxification">&lt;strong>4.2. Reinforcement Learning for Detoxification&lt;/strong>&lt;/h3>
&lt;p>To &lt;strong>detoxify language models&lt;/strong>, we optimize a &lt;strong>reward function&lt;/strong>:&lt;/p>
\[
R(W) = R_{\text{fluency}}(W) + \alpha R_{\text{fairness}}(W) - \beta R_{\text{toxicity}}(W)
\]&lt;p>where:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>\( R_{\text{fluency}} \)&lt;/strong>: Ensures coherent outputs.&lt;/li>
&lt;li>&lt;strong>\( R_{\text{fairness}} \)&lt;/strong>: Penalizes biased outputs.&lt;/li>
&lt;li>&lt;strong>\( R_{\text{toxicity}} \)&lt;/strong>: Penalizes offensive language.&lt;/li>
&lt;/ul>
&lt;p>Using &lt;strong>PPO (Proximal Policy Optimization)&lt;/strong>:&lt;/p>
\[
\theta_{t+1} = \theta_t + \eta \mathbb{E} \left[ \nabla_{\theta} \log \pi_{\theta} (W) R(W) \right]
\]&lt;p>where:&lt;/p>
&lt;ul>
&lt;li>\( \pi_{\theta} \) is the modelâ€™s policy,&lt;/li>
&lt;li>\( R(W) \) is the fairness-aware reward function.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="5-real-world-applications-of-nlp-for-fair-ai">&lt;strong>5. Real-World Applications of NLP for Fair AI&lt;/strong>&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Use Case&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Method Used&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Toxic Comment Detection&lt;/strong>&lt;/td>
&lt;td>Transformer-based classifiers (e.g., BERT, RoBERTa)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Bias-Free Resume Screening&lt;/strong>&lt;/td>
&lt;td>Adversarial debiasing in NLP models&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Safe AI Chatbots&lt;/strong>&lt;/td>
&lt;td>Controlled generation using RL-based detoxification&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Fair Sentiment Analysis&lt;/strong>&lt;/td>
&lt;td>Sentiment classifiers trained with fairness constraints&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;!-- This is a comment -->
&lt;!--
# Implementations
## **1. Introduction**
Natural Language Processing (NLP) and Large Language Models (LLMs) can be leveraged to **detect, mitigate, and prevent** toxicity and unconscious bias in text-based interactions. Techniques like **bias detection, sentiment analysis, adversarial training, and fairness-aware modeling** help ensure ethical AI deployment in diverse applications.
---
## **2. Key Challenges**
### **2.1. Toxicity in Language**
- **Hate Speech &amp; Harassment**: Offensive language targeting race, gender, religion, etc.
- **Misinformation &amp; Harmful Content**: Spreading false or harmful narratives.
- **Implicit Toxicity**: Sarcastic, coded, or context-dependent toxicity.
### **2.2. Unconscious Bias in Language**
- **Social Bias**: Stereotypes based on gender, ethnicity, or socioeconomic status.
- **Historical Bias**: AI trained on biased historical data continues patterns of discrimination.
- **Selection Bias**: NLP systems may favor dominant linguistic patterns (e.g., English over other languages).
---
## **3. NLP Techniques for Addressing Toxicity and Bias**
### **3.1. Text Classification for Toxicity Detection**
- **Approach**: Use supervised learning to classify text as **toxic** or **non-toxic**.
- **Example:** Using **BERT**, **GPT**, or **RoBERTa** for classification.
#### **Sample Code:**
```python
from transformers import pipeline
# Load a toxicity classifier model (pre-trained)
classifier = pipeline("text-classification", model="unitary/toxic-bert")
# Test toxic text detection
texts = ["I hate you!", "You are amazing!", "Some people are just so ignorant."]
results = classifier(texts)
# Display results
for text, result in zip(texts, results):
print(f"Text: {text} -- Label: {result['label']} (Score: {result['score']:.2f})")
```
**Enhancements**: Fine-tune models with domain-specific toxic datasets (e.g., **Jigsaw Toxic Comment Dataset**).
---
### **3.2. Bias Detection in Language Models**
- **Approach**: Analyze embeddings and outputs for biased associations.
- **Technique**: **Word Embedding Association Test (WEAT)** measures bias in word associations.
#### **Example: Bias in Word Embeddings**
```python
from whatlies.language import SpacyLanguage
from whatlies.embeddingset import EmbeddingSet
# Load language model
nlp = SpacyLanguage("en_core_web_md")
# Define gender-related words
words = ["doctor", "nurse", "engineer", "teacher", "man", "woman"]
# Get embeddings
embeddings = EmbeddingSet({word: nlp[word] for word in words})
# Visualize bias
embeddings.plot_interactive(x_axis="man", y_axis="woman")
```
- **Interpretation**: If gender-neutral words (e.g., "doctor", "nurse") cluster near gendered terms, the model reflects bias.
- **Mitigation**: **Re-training embeddings** using debiased datasets.
---
### **3.3. Adversarial Training to Reduce Bias**
- **Approach**: Train language models to **minimize correlations** between bias-sensitive features and predictions.
#### **Example: Adversarial Debiasing Model**
```python
from fairlearn.reductions import ExponentiatedGradient
from fairlearn.metrics import demographic_parity_difference
from sklearn.linear_model import LogisticRegression
from sklearn.datasets import make_classification
# Generate biased dataset
X, y = make_classification(n_samples=1000, n_features=10)
sensitive_feature = X[:, 0] # Simulated gender bias
# Train a fair model
base_model = LogisticRegression()
fair_model = ExponentiatedGradient(base_model, constraints="demographic_parity")
fair_model.fit(X, y, sensitive_features=sensitive_feature)
# Evaluate bias reduction
print("Demographic Parity Difference:", demographic_parity_difference(y, fair_model.predict(X), sensitive_feature))
```
- **Benefit**: Reduces the impact of **biased correlations** in training data.
---
### **3.4. Sentiment Analysis for Implicit Toxicity**
- **Approach**: Use sentiment classification with additional **toxicity** labels.
- **Example:** Classify text into **positive, negative, or toxic**.
#### **Sample Code:**
```python
from transformers import pipeline
# Load sentiment analysis model
sentiment_pipeline = pipeline("sentiment-analysis")
# Test with toxic language
texts = ["I love this place!", "You are so dumb!", "The service was terrible."]
results = sentiment_pipeline(texts)
# Display results
for text, result in zip(texts, results):
print(f"Text: {text} -- Sentiment: {result['label']} (Score: {result['score']:.2f})")
```
- **Enhancements**: Train on **toxicity-aware sentiment datasets**.
---
### **3.5. Fairness-Aware Text Generation**
- **Approach**: Modify **text generation objectives** to encourage fairness.
- **Technique**: Penalize biased outputs during training.
#### **Example: Controlled Text Generation**
```python
from transformers import pipeline
# Load GPT model with safe prompts
generator = pipeline("text-generation", model="gpt2")
# Generate unbiased responses
prompt = "A successful engineer is often"
output = generator(prompt, max_length=20, num_return_sequences=3)
# Display results
for i, text in enumerate(output):
print(f"Generated Text {i+1}: {text['generated_text']}")
```
- **Enhancement**: Use **prefix-tuning** to steer models towards neutral, inclusive language.
---
## **4. Real-World Applications**
### **4.1. Social Media Content Moderation**
- **Use Case**: Detect and filter hate speech in social networks.
- **Solution**: Integrate **real-time toxicity classification** in comment filtering.
### **4.2. Fair AI Recruitment**
- **Use Case**: Prevent **gender/racial bias** in job applicant screening.
- **Solution**: Train **fair NLP models** to score applicants **without biased attributes**.
### **4.3. Inclusive Chatbots &amp; Virtual Assistants**
- **Use Case**: Ensure **AI-generated responses** avoid stereotypes.
- **Solution**: Fine-tune **dialog models** with **bias-aware training datasets**.
---
## **5. Conclusion**
Using NLP and Language Models, we can:
1. **Detect toxicity** (Toxic BERT, GPT).
2. **Identify unconscious bias** (WEAT, Fairlearn).
3. **Reduce bias through adversarial training**.
4. **Generate fair and inclusive text**.
These techniques **promote ethical AI**, ensuring that language models reflect **diverse, fair, and safe** perspectives. ðŸš€
--></description></item></channel></rss>